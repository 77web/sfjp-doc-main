Windows 上に Git 環境を構築する方法(TortoiseGit と msysGit)
===========================================================

このページでは、Windows 上で Git 環境を構築する手順と、GitHub 上のリポジトリを更新するための設定について説明します。


使用するツールとインストール
----------------------------

  - **TortoiseGit**<br />
    Windows 上の Git クライアント。[配布サイト](http://code.google.com/p/tortoisegit/)
  - **msysGit**<br />
    Git コマンド群のバイナリディストリビューション。[配布サイト](http://code.google.com/p/msysgit/)


### msysGit のインストール

上記配布サイトの「Downloads」ページより、先頭に msysGit がつくインストーラーファイル（Full installer）をダウンロードします。
ダウンロードが完了したら、インストーラーを実行してインストールしてください。

インストールにはしばらく時間がかかります。

しばらく待つと、コマンドプロンプト（Git bashと呼びます）のような画面に完了メッセージが表示されます。Git bash 上で次のコマンドを入力して、デスクトップに Git bash を起動するショートカットを作成しましょう。

    $ /share/msysGit/add-shortcur.tcl Desktop

コマンドを実行すると、デスクトップに「msysGit」というショートカットアイコンが作成されます。次回から必要な時には、このアイコンをダブルクリックして Git bash を起動してください。

> **CAUTION**
> Git bash は、GitHub に登録する公開鍵を作成する際に必要になります。


### TortoiseGit のインストール

上記配布サイトの「Downloads」ページより、TortoiseGit のインストーラーファイルをダウンロードします。
32bit 環境用と 64bit 環境用がありますので、お使いの環境に合ったものをダウンロードして下さい。
ダウンロードが完了したら、インストーラーを実行してインストールしてください。


### インストールの確認

msysGit と TortoiseGit のインストールが完了し、システムを再起動すると、エクスプローラーでフォルダーを右クリックした際に下の図のように TortoiseGit のメニューが表示されるようになります。



SSH 公開鍵の作成
----------------

GitHub 上のリポジトリのファイルをローカルのコンピューター上で編集し、その編集を GitHub 上へ適用するには、SSH 公開鍵を作成しておく必要があります。
公開鍵の作成には、Git bash を使います。デスクトップで msysGit のアイコンをダブルクリックして、Git bash のプロンプトを表示させてください。

まずは以下のコマンドをプロンプトに入力して、公開鍵の作成を開始します。

    $ ssh-keygen -t rsa "メールアドレス"

上のコマンドを実行すると、途中でパスフレーズの入力を求められます。この鍵でのアクセスに使用するパスフレーズを適宜入力してください。
コマンドの実行が完了すると、`id_rsa` ファイル（秘密鍵）と `id_rsa.pub` ファイル（公開鍵）ができています。

> **CAUTION**
> コマンドの出力に、ファイルが保存されたディレクトリが表示されていますので、確認してください。


### GitHub への SSH 公開鍵の登録

作成した SSH 公開鍵は、GitHub に登録する必要があります。
GitHub のサイトへブラウザでアクセスして「アカウントの設定」をクリックし、「アカウントの概要」の「SSH 公開鍵」を選択してください。
「別の公開鍵の追加」をクリックしてから、使用するコンピュータの名前などを「鍵のタイトル」に入力します。「キー」欄には、作成した公開鍵のファイル（`id_rsa.pub`）をテキストエディタで開き、内容をコピー＆ペーストしてください。
最後に「キーの追加」ボタンをクリックすると、GitHub に公開鍵が登録されます。



GitHub 上のリポジトリを更新してみる
-----------------------------------

では、GitHub 上にテスト用のリポジトリを作成して、それを更新してみましょう。

  1. GitHub の「ダッシュボード」で「新しいリポジトリ」ボタンをクリックします。すると、リポジトリの作成画面が表示されます。
  2. リポジトリの名前と説明を入力します。ここではリポジトリの名前を「test」とします。
  3. 「リポジトリを作る」をクリックすると GitHub 上でリポジトリが初期化され、最初の手順の案内が表示されます。
     - この画面に表示される「git remote add origin git@github.com:hidenorigoto/test.git」というような行の git@github.com～ の URL は後で使いますので、どこかにメモしておくか、この画面をこのまま開いておいてください。（URL*1）
  4. ローカルコンピューター上の作業ディレクトリの好きな場所をエクスプローラーで表示し、リポジトリのトップディレクトリとなる「test」という名前のディレクトリを作成します。
  5. 作成した「test」ディレクトリを右クリックして、TortoiseGit のメニューから「Git Create repository here」を選択します。
  6. 「test」ディレクトリ内に「README.txt」というテキストファイルを作成し、内容を適当に作成してください。
  7. 「REEAME.txt」を文字コード UTF-8 で保存してください。（改行コードは LF などに統一することをお勧めします）
  8. 「README.txt」を右クリックし、TortoiseGit のメニューから「Git Add（または TortoiseGit メニュー内の Add）」を選択します。確認ウィンドウが表示されるので、README.txt にチェックがついていることを確認して、OK ボタンをクリックします。
     - これで、README.txt ファイルが「コミット対象リスト」にステージングされました。
  9. 「test」ディレクトリを右クリックし、TortoiseGit のメニューから「Git Commit -> "master"」というようなメニューを選択します。すると、コミット用のウィンドウが表示されます。
  10. コミットメッセージを入力します。ここでは「first comit」としましょう。
  11. コミットウィンドウの OK ボタンをクリックすると、コミットされます。
      - この時点では、ローカルコンピュータ上のリポジトリにコミットが記録されます。
  12. ローカルのリポジトリの更新を、GitHub のリポジトリへ反映します。この操作を「プッシュ」といいます。
      - まず、プッシュするための設定を追加します。「test」ディレクトリを右クリックして TortoiseGit のメニューから「Settings」を選択します。
      - 設定ウィンドウの設定項目で「Git」の「Remote」を選択します。
      - リモート設定画面で、以下のように入力します。
         - Remote: origin
         - Url: URL*1 を入力します。
         - Putty Key: 作成した SSH の秘密鍵のファイルを選択します。
      - 入力が完了したら「Add New」をクリックして下さい。すると「Remote:」の一覧に「origin」が追加されます。
      - ウィンドウ右下の「適用」ボタンをクリックし、その後「キャンセル」ボタンをクリックして設定ウィンドウを閉じて下さい。
  13. 「test」ディレクトリを右クリックして TortoiseGit のメニューから「Git Sync...」を選択します。同期用のウィンドウが表示されます。
  14. 同期用のウィンドウで「Push」をクリックすると、GitHub への更新の適用処理が行われます。この処理には少しだけ時間がかかります。
  15. プッシュが完了したら、ブラウザで GitHub のリポジトリへアクセスしてみてください。README.txt ファイルが正しく登録されていれば、ここまでの手順は完了です。

